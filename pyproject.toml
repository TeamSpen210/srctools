[build-system]
requires = [
	"setuptools >= 68.1.0",
	"wheel >= 0.37.0",
	"cython >= 3.0.0",
	"versioningit >= 2.1.0"
	]
build-backend = "setuptools.build_meta"

[project]
name = "srctools"
requires-python = ">=3.8"
dynamic = ["version"]
urls = {source="https://github.com/TeamSpen210/srctools"}
description = "Modules for working with Valve's Source Engine file formats."
readme = "README.md"
keywords = ["Valve", "Source Engine"]
authors = [
	{name="TeamSpen210", email="spencerb21@live.com"}
]
license = {text = "MIT"}
classifiers = [
	"Development Status :: 5 - Production/Stable",
	"Framework :: Pytest",
	"Framework :: tox",
	"License :: OSI Approved :: MIT License",
	"Programming Language :: Cython",
	"Programming Language :: Python :: 3.8",
	"Programming Language :: Python :: 3.9",
	"Programming Language :: Python :: 3.10",
	"Programming Language :: Python :: 3.11",
	"Programming Language :: Python :: 3.12",
	"Programming Language :: Python :: 3 :: Only",
	"Programming Language :: Python :: Implementation :: CPython",
	"Programming Language :: Python :: Implementation :: PyPy",
	"Topic :: Games/Entertainment",
	"Topic :: Multimedia :: Graphics :: 3D Modeling",
	"Topic :: Scientific/Engineering :: Mathematics",
]
dependencies=[
	"attrs >= 21.2.0",
	"typing_extensions >= 4.6.2",
	"importlib_resources >= 5.8.0",
	"useful_types >= 0.1.0",
]
[optional-dependencies]
# VTF support.
wx = ["wxPython"]
test = [
	"pytest",
	"pytest-datadir",
	"pytest-regressions",
]


[project.scripts]
srctools_dump_parms = "srctools.scripts.dump_parms:main"
srctools_diff = "srctools.scripts.diff:main"
srctools_find_deps = "srctools.scripts.find_deps:main"

[project.entry-points]
pyinstaller40 = {hook-dirs="srctools._pyinstaller:get_hook_dirs"}

[tool.setuptools.packages.find]
	where = ["src"]
	include = ["srctools*"]

[tool.versioningit.vcs]
default-tag = "v0.0.0"

[tool.versioningit.tag2version]
rmprefix = "postcompiler_"  # For old tags

[tool.versioningit.format]
distance = "{base_version}.dev_{distance}+{rev}"
dirty = "{base_version}+dirty_{build_date:%Y.%m.%d}"
distance-dirty = "{base_version}.dev{distance}+{rev}.dirty.{build_date:%Y.%m.%d}"

[tool.versioningit.write]
method = "basic"
file = "src/srctools/_version.py"

[tool.cibuildwheel]
# Ensure both 32-bit and 64-bit are built
archs = "auto"
# Skip building:
skip = [
	"{cp,pp}{36,37}-*", # < Python 3.8
	"*linux_i686",  # 32-bit linux (all)
	"{cp,pp}{39,310,311,312,313,314,315,316}-win32",  # 32-bit on 3.9+
]

# After building, run tests to check it works.
before-test = "pip install -r test-requirements.txt"
test-command = 'pytest -m "not slow" {project}/tests'

[tool.pytest.ini_options]
markers = [
	"slow: marks especially-slow tests, to skip when building wheels",
]

[tool.pyright]
include = [
	"src/srctools/"
	]
exclude = [
	"**/__pycache__"
	]
stubPath = "src/"   # Use our module for stubs.
# We want to do conversions when setting.
reportPropertyTypeMismatch = false
pythonVersion = "3.8"
strictParameterNoneValue = false

[tool.mypy]
warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_no_return = true

disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true

strict_optional = true
check_untyped_defs = true
show_error_codes = true
strict = true

[tool.isort]
sections=["FUTURE", "TYPING", "FRAMEWORK", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_framework = []
extra_standard_library = ["importlib_resources"]
known_typing = ["typing", "typing_extensions"]
no_lines_before = ["TYPING", "FRAMEWORK", "STDLIB"]
multi_line_output = 5 # hanging grid grouped
# Wrap to 90 long, but only if it exceeds 100 chars.
line_length = 100
wrap_length = 90
lines_after_imports = 2
use_parentheses = true
order_by_type = true
include_trailing_comma = true
from_first = true
combine_as_imports = true
src_paths = ["src", "tests", "type_tests"]

[tool.ruff]
line-length = 127

[tool.ruff.lint]
select = [
	"UP", "F", "C4", "ANN", "B", "PIE", "RUF",
	"PLC", "PLE", "PLW",  # Pylint.

	"TCH005",  # Empty type-checking block.
]
allowed-confusables = [
	"Ã—",  # Multiplication sign
]
extend-ignore = [
	# Allow *-imports.
	"F403",
	# name may be undefined, or defined from star imports: module
	"F405",
	"F841",  # Unused local var, detects tuple unpacks.
	# Flake8-annotations.
	# Type annotations for self & cls are not important.
	"ANN101",
	"ANN102",
	# Allow typing.Any
	"ANN401",

	# PyLint:
	"PLC0414",  # import x as x is used for type checking.
	"PLC0415",  # We use non-toplevel imports to fetch our databases after initialising the classes.
	"PLC1901",  # Allow compare to empty string, can be more clear.
	"PLE1205",  # Too many arguments for logging, doesn't handle our format
	"PLW0603",  # Allow use of global statement.
	"PLW2901",  # Allow redefining loop var inside the loop.

	# Ruff:
	"RUF100", # Sometimes use # noqa for other linters
	"RUF022", # All not sorted
	"RUF023", # Slots not sorted

	# Flake8-bugbear:
	# Loop control var not used, triggers on unpackings.
	"B007",
	# Stacklevel parameter required for warnings.warn() - doesn't detect positional args.
	"B028",

	# Pycodestyle, when out of preview:
	"E221",  # Allow multiple spaces before operators if we want to align
	"E226",  # Allow no spaces like "1+1", sometimes useful to indicate precedence

	# Pyupgrade:
	# Keep using typing types even with __future__.annotations.
	"UP006", "UP007",

	# Flake8-pie:
	# Prefer to use pass in empty functions, even if docstring is present
	"PIE790",
	# Allow aliases for enum values, used often.
	"PIE796",
	]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
	"srctools.math.FrozenVec", "srctools.math.FrozenAngle", "srctools.math.FrozenMatrix",
	"typing.cast", "srctools.logger.get_logger",
]
