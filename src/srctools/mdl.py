"""Parses Source models, to extract metadata."""
import itertools
import math
from typing import (
    Union, Optional, Callable, Any, cast,
    List, Dict, Tuple, IO, Iterator, Iterable, Sequence as SequenceType,
)
from typing_extensions import TypeAlias
from enum import Flag as FlagEnum, Enum
from pathlib import PurePosixPath
from struct import Struct, pack as struct_pack
import os
import io

import attrs

from srctools import Property
from srctools.const import add_unknown
from srctools.binformat import (
    DeferredWrites, parse_3x4_matrix, struct_read, read_nullstr, read_offset_array,
    str_readvec, build_3x4_matrix
)
from srctools.const import BSPContents
from srctools.filesys import FileSystem, File
from srctools.math import Angle, Matrix, Vec


# All the file extensions used for models.
MDL_EXTS: SequenceType[str] = [
    '.mdl',
    '.phy',
    '.vvd',
    '.ani',
    '.dx90.vtx',
    '.dx80.vtx',
    '.sw.vtx',
]


class Flags(FlagEnum):
    """Flags for studio models."""
    autogenerated_hitbox = 1 << 0
    uses_env_cubemap = 1 << 1
    force_opaque = 1 << 2
    translucent_twopass = 1 << 3
    static_prop = 1 << 4
    uses_fb_texture = 1 << 5
    hasshadowlod = 1 << 6
    uses_bumpmapping = 1 << 7
    use_shadowlod_materials = 1 << 8

    no_forced_fade = 1 << 11
    force_phoneme_crossfade = 1 << 12
    constant_directional_light_dot = 1 << 13
    flexes_converted = 1 << 14
    built_in_preview_mode = 1 << 15
    ambient_boost = 1 << 16
    do_not_cast_shadows = 1 << 17
    cast_texture_shadows = 1 << 18

    add_unknown(locals())


class AnimEventTypes(FlagEnum):
    """Categories of animation events."""
    NONE = 0
    SERVER    = 1 << 0
    SCRIPTED  = 1 << 1
    SHARED    = 1 << 2
    WEAPON    = 1 << 3
    CLIENT    = 1 << 4
    FACEPOSER = 1 << 5
    add_unknown(locals())

CL = AnimEventTypes.CLIENT
SV = AnimEventTypes.SERVER


class AnimEvents(Enum):
    """The types of events in models.

    0    -  999 is "specific" / new string-based type.
    1000 - 1999 is for scripted events.
    2000 - 2999 is shared events.
    3000 - 4999 is weapon events.
    5000+       is clientside events.
    """

    # New string-based type (eventlist.h)
    AE_EMPTY = 0
    AE_NPC_LEFTFOOT = 1
    AE_NPC_RIGHTFOOT = 2
    AE_NPC_BODYDROP_LIGHT = 3
    AE_NPC_BODYDROP_HEAVY = 4
    AE_NPC_SWISHSOUND = 5
    AE_NPC_180TURN = 6
    AE_NPC_ITEM_PICKUP = 7
    AE_NPC_WEAPON_DROP = 8
    AE_NPC_WEAPON_SET_SEQUENCE_NAME = 9
    AE_NPC_WEAPON_SET_SEQUENCE_NUMBER = 10
    AE_NPC_WEAPON_SET_ACTIVITY = 11
    AE_NPC_HOLSTER = 11
    AE_NPC_DRAW = 12
    AE_NPC_WEAPON_FIRE = 13

    AE_CL_PLAYSOUND = 14
    AE_SV_PLAYSOUND = 15
    AE_CL_STOPSOUND = 16

    AE_START_SCRIPTED_EFFECT = 17
    AE_STOP_SCRIPTED_EFFECT = 18

    AE_CLIENT_EFFECT_ATTACH = 19

    AE_MUZZLEFLASH = 20
    AE_NPC_MUZZLEFLASH = 21

    AE_THUMPER_THUMP = 22
    AE_AMMOCRATE_PICKUP_AMMO = 23

    AE_NPC_RAGDOLL = 24
    AE_NPC_ADDGESTURE = 25
    AE_NPC_RESTARTGESTURE = 26
    AE_NPC_ATTACK_BROADCAST = 27
    AE_NPC_HURT_INTERACTION_PARTNER = 28
    AE_NPC_SET_INTERACTION_CANTDIE = 29

    AE_SV_DUSTTRAIL = 30
    AE_CL_CREATE_PARTICLE_EFFECT = 31
    AE_RAGDOLL = 32

    AE_CL_ENABLE_BODYGROUP = 33
    AE_CL_DISABLE_BODYGROUP = 34
    AE_CL_BODYGROUP_SET_VALUE = 35
    AE_CL_BODYGROUP_SET_VALUE_CMODEL_WPN = 36

    AE_WPN_PRIMARYATTACK = 37
    AE_WPN_INCREMENTAMMO = 38
    AE_WPN_HIDE = 39
    AE_WPN_UNHIDE = 40
    AE_WPN_PLAYWPNSOUND = 41

    AE_RD_ROBOT_POP_PANELS_OFF = 42

    AE_TAUNT_ENABLE_MOVE = 43
    AE_TAUNT_DISABLE_MOVE = 44

    # Alien Swarm+ events
    AE_ASW_FOOTSTEP = 45
    AE_MARINE_FOOTSTEP = 46
    AE_MARINE_RELOAD_SOUND_A = 47
    AE_MARINE_RELOAD_SOUND_B = 48
    AE_MARINE_RELOAD_SOUND_C = 49
    AE_REMOVE_CLIENT_AIM = 50

    AE_MELEE_DAMAGE = 51
    AE_MELEE_START_COLLISION_DAMAGE = 52
    AE_MELEE_STOP_COLLISION_DAMAGE = 53
    AE_SCREEN_SHAKE = 54
    AE_START_DETECTING_COMBO = 55
    AE_STOP_DETECTING_COMBO = 56
    AE_COMBO_TRANSITION = 57
    AE_ALLOW_MOVEMENT = 57
    AE_SKILL_EVENT = 59

    AE_TUG_INCAP = 60

    # Script events (scriptevent.h)
    SCRIPT_EVENT_DEAD = 1000
    SCRIPT_EVENT_NOINTERRUPT = 1001
    SCRIPT_EVENT_CANINTERRUPT = 1002
    SCRIPT_EVENT_FIREEVENT = 1003
    SCRIPT_EVENT_SOUND = 1004
    SCRIPT_EVENT_SENTENCE  = 1005
    SCRIPT_EVENT_INAIR = 1006
    SCRIPT_EVENT_ENDANIMATION = 1007
    SCRIPT_EVENT_SOUND_VOICE = 1008
    SCRIPT_EVENT_SENTENCE_RND1 = 1009
    SCRIPT_EVENT_NOT_DEAD  = 1010
    SCRIPT_EVENT_EMPHASIS  = 1011
    SCRIPT_EVENT_BODYGROUPON  = 1020
    SCRIPT_EVENT_BODYGROUPOFF  = 1021
    SCRIPT_EVENT_BODYGROUPTEMP = 1022
    SCRIPT_EVENT_FIRE_INPUT = 1100

    NPC_EVENT_BODYDROP_LIGHT = 2001
    NPC_EVENT_BODYDROP_HEAVY = 2002

    NPC_EVENT_SWISHSOUND = 2010

    NPC_EVENT_180TURN = 2020

    NPC_EVENT_ITEM_PICKUP = 2040
    NPC_EVENT_WEAPON_DROP = 2041
    NPC_EVENT_WEAPON_SET_SEQUENCE_NAME = 2042
    NPC_EVENT_WEAPON_SET_SEQUENCE_NUMBER = 2043
    NPC_EVENT_WEAPON_SET_ACTIVITY = 2044

    NPC_EVENT_LEFTFOOT = 2050
    NPC_EVENT_RIGHTFOOT  = 2051

    NPC_EVENT_OPEN_DOOR = 2060

    EVENT_WEAPON_MELEE_HIT = 3001
    EVENT_WEAPON_SMG1 = 3002
    EVENT_WEAPON_MELEE_SWISH = 3003
    EVENT_WEAPON_SHOTGUN_FIRE = 3004
    EVENT_WEAPON_THROW = 3005
    EVENT_WEAPON_AR1 = 3006
    EVENT_WEAPON_AR2 = 3007
    EVENT_WEAPON_HMG1 = 3008
    EVENT_WEAPON_SMG2 = 3009
    EVENT_WEAPON_MISSILE_FIRE = 3010
    EVENT_WEAPON_SNIPER_RIFLE_FIRE = 3011
    EVENT_WEAPON_AR2_GRENADE = 3012
    EVENT_WEAPON_THROW2 = 3013
    EVENT_WEAPON_PISTOL_FIRE = 3014
    EVENT_WEAPON_RELOAD = 3015
    EVENT_WEAPON_THROW3 = 3016
    EVENT_WEAPON_RELOAD_SOUND = 3017
    EVENT_WEAPON_RELOAD_FILL_CLIP = 3018
    EVENT_WEAPON_SMG1_BURST1 = 3101
    EVENT_WEAPON_SMG1_BURSTN = 3102
    EVENT_WEAPON_AR2_ALTFIRE  = 3103

    EVENT_WEAPON_SEQUENCE_FINISHED = 3900

    # Client-side events (cl_animevent.h)
    CL_EVENT_MUZZLEFLASH0 = 5001
    CL_EVENT_MUZZLEFLASH1 = 5011
    CL_EVENT_MUZZLEFLASH2 = 5021
    CL_EVENT_MUZZLEFLASH3 = 5031
    CL_EVENT_SPARK0 = 5002
    CL_EVENT_NPC_MUZZLEFLASH0 = 5003
    CL_EVENT_NPC_MUZZLEFLASH1 = 5013
    CL_EVENT_NPC_MUZZLEFLASH2 = 5023
    CL_EVENT_NPC_MUZZLEFLASH3 = 5033
    CL_EVENT_SOUND = 5004
    CL_EVENT_EJECTBRASS1 = 6001
    CL_EVENT_DISPATCHEFFECT0 = 9001
    CL_EVENT_DISPATCHEFFECT1 = 9011
    CL_EVENT_DISPATCHEFFECT2 = 9021
    CL_EVENT_DISPATCHEFFECT3 = 9031
    CL_EVENT_DISPATCHEFFECT4 = 9041
    CL_EVENT_DISPATCHEFFECT5 = 9051
    CL_EVENT_DISPATCHEFFECT6 = 9061
    CL_EVENT_DISPATCHEFFECT7 = 9071
    CL_EVENT_DISPATCHEFFECT8 = 9081
    CL_EVENT_DISPATCHEFFECT9 = 9091
    CL_EVENT_SPRITEGROUP_CREATE = 6002
    CL_EVENT_SPRITEGROUP_DESTROY = 6003
    CL_EVENT_FOOTSTEP_LEFT = 6004
    CL_EVENT_FOOTSTEP_RIGHT = 6005
    CL_EVENT_MFOOTSTEP_LEFT = 6006
    CL_EVENT_MFOOTSTEP_RIGHT = 6007
    CL_EVENT_MFOOTSTEP_LEFT_LOUD = 6008
    CL_EVENT_MFOOTSTEP_RIGHT_LOUD = 6009

    # These are defined directly as numbers, in
    # C_CSPlayer::FireEvent in the 2007 cstrike branch.
    CSS_FOOT_WATER_SPLASH = 7001
    CSS_FOOT_WATER_RIPPLE = 7002

    # A different set of foot impact events from
    # CSGO. Options are 'lfoot' or 'rfoot' (IK names)
    CSGO_FOOT_JUMP = 4001
    CSGO_FOOT_WALK = 4002


ANIM_EVENT_BY_INDEX = {
    event.value: event
    for event in AnimEvents
}  # type: Dict[int, AnimEvents]
ANIM_EVENT_BY_NAME = {
    event.name: event
    for event in AnimEvents
    # Don't save some that don't actually have official names.
    if event.value not in (4001, 4002, 7001, 7002)
}  # type: Dict[str, AnimEvents]

ST_PHY_HEADER = Struct('<iiil')
# Max size of a model filename.
MAX_NAME_SIZE = 64


class TrackedFile(io.RawIOBase, IO[bytes]):
    """A file-like object which tracks which bytes have been read.

    This allows us to gradually implement parsing of the model, and when saving
    re-insert unparsed data where it was originally.
    """

    def __init__(self, file: IO[bytes]) -> None:
        self.data = file.read()
        self._cur_pos = 0
        self._read = bytearray(len(self.data))
        # Filled after the file is closed.
        self.segments: List[Tuple[int, bytes]] = []

    def read(self, size: int = -1) -> bytes:
        """Read data from the file."""
        cur_pos = self._cur_pos
        if size < 0:
            self._cur_pos = end_pos = len(self.data)
        else:
            self._cur_pos = end_pos = min(cur_pos + size, len(self.data))
        for i in range(cur_pos, end_pos):
            self._read[i] = 0xFF
        return self.data[cur_pos:end_pos]

    def readinto(self, buffer: Any) -> int:
        """Read into the provided buffer.

        This just calls read(), so it is not efficent.
        """
        view = memoryview(buffer)
        size = len(view)
        view[:] = self.read(size)
        return size

    def readall(self) -> bytes:
        """Read all the remaining data."""
        return self.read()

    def seek(self, offset: int, whence: int = io.SEEK_SET) -> int:
        """Seek to the provided position."""
        size = len(self.data)
        if whence == io.SEEK_SET:
            pass
        elif whence == io.SEEK_CUR:
            offset += self._cur_pos
        elif whence == io.SEEK_END:
            offset += size
        else:
            raise ValueError(f'Unknown whence value {whence}!')

        if offset >= size:
            offset = size - 1
        self._cur_pos = offset
        return offset

    def tell(self) -> int:
        """Return the current file offset."""
        return self._cur_pos

    def close(self) -> None:
        """Closing collects the unparsed data."""
        if self.segments:
            # Closed already.
            return

        unread_start: Optional[int] = None
        for pos, is_read in enumerate(self._read):
            if unread_start is None and not is_read:
                unread_start = pos
            elif unread_start is not None and is_read:
                self.segments.append((unread_start, self.data[unread_start:pos]))
                unread_start = None
        if unread_start is not None:
            self.segments.append((unread_start, self.data[unread_start:]))
        # Clear our data, not needed any more.
        self.data = b''
        self._read.clear()
        self._cur_pos = 0

    def readable(self) -> bool:
        """We are readable."""
        return True

    def seekable(self) -> bool:
        """We are seekable."""
        return True

    def writable(self) -> bool:
        """We are not writable."""
        return False

    def fileno(self) -> int:
        """This is not a real file."""
        raise IOError('In-memory file!')

    def truncate(self, size: Optional[int] = None) -> int:
        """This cannot be truncated."""
        raise IOError('File cannot be modified!')

    def write(self, buf: Any) -> int:
        """This cannot be written to."""
        raise IOError('File cannot be modified!')

    def writelines(self, lines: Any) -> None:
        """This cannot be written to."""
        raise IOError('File cannot be modified!')


@attrs.define
class IncludedMDL:
    """Additional model files to load animations from."""
    label: str
    filename: str


@attrs.define
class SeqEvent:
    """An event that occurs at some point in an animation sequence."""
    # AnimEvents for known common ones, str for dynamic NPC-specific events.
    type: Union[AnimEvents, str]
    cycle: float  # Point within the animation that it's triggered.
    options: str  # Additional event-specific data.


@attrs.define
class Bone:
    """A model bone."""
    name: str
    parent: Optional['Bone'] = attrs.field(repr=False)  # Hide, you get recursive reprs.
    controller_ind: Tuple[int, int, int, int, int, int]
    pos: Vec
    quat: Tuple[float, float, float, float]  # TODO Class
    rotation: Angle

    pos_scale: Vec
    rot_scale: Vec

    pose_to_bone: Matrix
    pose_to_bone_off: Vec

    q_alignment: Tuple[float, float, float, float]
    flags: int  # TODO
    proc_type: int
    proc_index: int  # TODO
    phys_bone: int
    surfaceprop: str
    contents: BSPContents


@attrs.define
class BoneController:
    """Goldsource era control of bones via entity code."""
    bone: int
    type: int
    start: float
    end: float
    rest: int
    inputfield: int


ST_BONE = Struct('ii6i3f4f3f3f3f9f3f4f6i32x')
ST_BONE_CONTROLLER = Struct('iiffii32x')


@attrs.define
class Hitbox:
    """Hitbox bounding box."""
    bone: Bone
    group: int
    name: str
    min: Vec
    max: Vec


ST_HITBOX = Struct('ii3f3fi32x')
ST_HITBOXSET = Struct('iii')


@attrs.define
class Animation:
    """A more basic animation definition."""
    name: str
    fps: float
    flags: int
    frame_count: int
    movement: Tuple[int, int]  # TODO parse
    ikrule_zero: int
    animblock: int
    animindex: int

    ikrule_count: int
    ikrule_off: int
    ikrule_animblock: int

    local_hierarchy_count: int
    local_hierarchy_off: int

    section_off: int
    section_frames: int

    zeroframe_span: int
    zeroframe_count: int
    zeroframe_ind: int
    zeroframe_stalltime: float


ST_ANIMATION = Struct('4xif5i20x9ihhif')


@attrs.define
class Sequence:
    """An animation sequence."""
    label: str
    act_name: str
    flags: int
    act_weight: int
    events: List[SeqEvent]
    bbox_min: Vec
    bbox_max: Vec
    # More after here.
    keyvalues: str


class Model:
    """Represents parts of Source models.

    This does not parse the animation or geometry data, only other metadata.
    """
    version: int  # Format version.
    checksum: bytes  # 4-byte checksum
    name: str  # Filename of the model.
    eye_pos: Vec  # For creatures, eye position.
    illum_pos: Vec  # Offset to sample lighting from.

    hull_min: Vec
    hull_max: Vec
    view_min: Vec
    view_max: Vec

    flags: Flags
    bones_order: List[Bone]
    bones: Dict[str, Bone]
    bone_controllers: List[BoneController]
    hitboxes: Dict[str, List[Hitbox]]
    animations: Dict[str, Animation]

    def __init__(self, filesystem: FileSystem, file: File):
        """Parse a model from a file."""
        self._file = file
        self._sys = filesystem
        self.version = 49
        self.checksum = b'\0\0\0\0'

        self.bones_order = []
        self.bones = {}
        self.bone_controllers = []
        self.hitboxes = {}
        self.phys_keyvalues = Property.root()
        self.animations = {}

        with self._file.open_bin() as f, TrackedFile(f) as tracker:
            self._load(tracker)

        self._unparsed = tracker.segments

        path = PurePosixPath(file.path)
        try:
            phy_file = filesystem[str(path.with_suffix('.phy'))]
        except FileNotFoundError:
            pass
        else:
            with phy_file.open_bin() as f:
                self._parse_phy(f, phy_file.path)

    def _load(self, f: TrackedFile) -> None:
        """Read data from the MDL file."""
        assert f.tell() == 0, "Doesn't begin at start?"
        if f.read(4) != b'IDST':
            raise ValueError('Not a model!')
        (
            self.version,
            self.checksum,
            name,
            file_len,
        ) = struct_read('i 4s 64s i', f)

        if not 44 <= self.version <= 49:
            raise ValueError(f'Unknown MDL version {self.version}!')

        self.name = name.rstrip(b'\0').decode('ascii')

        for chunk in _CHUNKS:
            header_data = f.read(chunk.format.size)
            pos = f.tell()
            chunk.read(self, f, chunk.format.unpack(header_data))
            f.seek(pos)

        # self._old_load(f)

    def assemble(self) -> list[tuple[str, bytes]]:
        """Build the model files.

        This returns filename / content pairs.
        """
        mdl = io.BytesIO()
        defer = DeferredWrites(mdl)
        mdl.write(struct_pack('4si', b'IDST', self.version))
        # Don't use DeferredWrites for checksum, it has to be done after that writes.
        checksum_pos = mdl.tell()
        mdl.write(b'\0\0\0\0')

        byte_name = self.name.encode('ascii')
        if len(byte_name) > MAX_NAME_SIZE:
            raise ValueError(
                f'Model filename must be smaller than {MAX_NAME_SIZE} '
                f'bytes, not "{self.name}"!'
            )
        mdl.write(byte_name)
        mdl.write(bytes(MAX_NAME_SIZE - len(byte_name)))
        defer.defer('file_len', 'i', write=True)

        start = mdl.tell()
        header_size = sum(chunk.format.size for chunk in _CHUNKS)
        used = [slice(0, start + header_size)]
        # First write zeros to extend length.
        mdl.write(bytes(self._unparsed[-1][0] - start))
        for off, data in self._unparsed:
            mdl.seek(off)
            mdl.write(data)
            used.append(slice(off, off + len(data)))
        holes = [
            slice(prev.stop, used[i+1].start)
            for i, prev in enumerate(used[:-1])
        ]
        file_len = mdl.tell()

        def malloc(size_or_data: Union[int, bytes]) -> int:
            """Used to request a free space in the model file."""
            nonlocal file_len
            prev_pos = mdl.tell()
            if isinstance(size_or_data, int):
                size = size_or_data
            else:
                size = len(size_or_data)
            # This is not particularly efficient, but as we parse more,
            # holes get fewer.
            for i, seg in enumerate(holes):
                if seg.stop - seg.start >= size:
                    # Found a spot. Resize hole to account for this and return.
                    # If it's totally full this becomes a zero-long slice, and gets
                    # skipped after.
                    holes[i] = slice(seg.start + size, seg.stop)
                    offset = seg.start
                    break
            else:  # No space, put it at the end.
                offset = file_len
                file_len += size
            if isinstance(size_or_data, bytes):
                mdl.seek(offset)
                mdl.write(size_or_data)
            mdl.seek(prev_pos)
            return offset

        pos = start
        for chunk in _CHUNKS:
            mdl.seek(pos)
            assert chunk.write is not None, f'No writer for {chunk.read!r}!'
            data_tup = chunk.write(self, mdl, defer, malloc)
            mdl.seek(pos)
            mdl.write(chunk.format.pack(*data_tup))
            pos = mdl.tell()

        # Now write file length and checksum.
        defer.set_data('file_len', mdl.seek(0, io.SEEK_END))
        defer.write()
        # TODO: recalculate this?
        mdl.seek(checksum_pos)
        mdl.write(self.checksum)

        stem, _ = os.path.splitext(self.name)
        return [
            (stem + '.mdl', mdl.getvalue()),
        ]

    def _old_load(self, f: IO[bytes]) -> None:
        """Directly read from the model. TODO remove."""
        # Break up the reading a bit to limit the stack size.
        (sequence_count, sequence_off) = struct_read('<2I', f)

        (
            activitylistversion, eventsindexed,

            texture_count, texture_offset,
            cdmat_count, cdmat_offset,

            skinref_count,  # Number of skin "groups"
            skin_count,   # Number of model skins.
            skinref_ind,  # Location of skins reference table.

            # The number of $body in the model (mstudiobodyparts_t).
            bodypart_count, bodypart_offset,
            attachment_count, attachment_offset,
        ) = struct_read('<13i', f)

        (
            localnode_count,
            localnode_index,
            localnode_name_index,

            # mstudioflexdesc_t
            flexdesc_count,
            flexdesc_index,

            # mstudioflexcontroller_t
            flexcontroller_count,
            flexcontroller_index,

            # mstudioflexrule_t
            flexrules_count,
            flexrules_index,

            # IK probably refers to inverse kinematics
            # mstudioikchain_t
            ikchain_count,
            ikchain_index,

            # Information about any "mouth" on the model for speech animation
            # More than one sounds pretty creepy.
            # mstudiomouth_t
            mouths_count,
            mouths_index,

            # mstudioposeparamdesc_t
            localposeparam_count,
            localposeparam_index,
        ) = struct_read('<15I', f)

        # VDC:
        # For anyone trying to follow along, as of this writing,
        # the next "surfaceprop_index" value is at position 0x0134 (308)
        # from the start of the file.
        assert f.tell() == 308, 'Offset wrong? {} != 308 {}'.format(f.tell(), f)

        (
            # Surface property value (single null-terminated string)
            surfaceprop_index,

            # Unusual: In this one index comes first, then count.
            # Key-value data is a series of strings. If you can't find
            # what you're interested in, check the associated PHY file as well.
            keyvalue_index,
            keyvalue_count,

            # More inverse-kinematics
            # mstudioiklock_t
            iklock_count,
            iklock_index,
        ) = struct_read('<5I', f)

        (
            self.mass,  # Mass of object (float)
            self.contents,  # ??

            # Other models can be referenced for re-used sequences and
            # animations
            # (See also: The $includemodel QC option.)
            # mstudiomodelgroup_t
            includemodel_count,
            includemodel_index,

            # In-engine, this is a pointer to the combined version of this +
            # included models. In the file it's useless.
            virtualModel,

            # mstudioanimblock_t
            animblocks_name_index,
            animblocks_count,
            animblocks_index,

            animblockModel,  # Placeholder for mutable-void*

            # Points to a series of bytes?
            bonetablename_index,

            vertex_base,  # Placeholder for void*
            offset_base,  # Placeholder for void*
        ) = struct_read('<f 11I', f)

        (
            # Used with $constantdirectionallight from the QC
            # Model should have flag #13 set if enabled
            directionaldotproduct,  # byte

            # Preferred rather than clamped
            rootLod,  # byte

            # 0 means any allowed, N means Lod 0 -> (N-1)
            self.numAllowedRootLods,  # byte

            # unknown byte;
            # unknown int;

            # mstudioflexcontrollerui_t
            flexcontrollerui_count,
            flexcontrollerui_index,
        ) = struct_read('3b 5x 2I', f)

        # Build CDMaterials data
        f.seek(cdmat_offset)
        self.cdmaterials = read_offset_array(f, cdmat_count)

        for ind, cdmat in enumerate(self.cdmaterials):
            cdmat = cdmat.replace('\\', '/').lstrip('/')
            if cdmat and cdmat[-1:] != '/':
                cdmat += '/'
            self.cdmaterials[ind] = cdmat

        # Build texture data
        f.seek(texture_offset)
        textures: List[Tuple[str, int, int]] = [('', 0, 0)] * texture_count
        tex_temp: List[Tuple[int, Tuple[int, int, int]]] = [(0, (0, 0, 0))] * texture_count
        for tex_ind in range(texture_count):
            tex_temp[tex_ind] = (
                f.tell(),
                # Texture data:
                # int: offset to the string, from start of struct.
                # int: flags - appears to solely indicate 'teeth' materials...
                # int: used, whatever that means.
                # 4 unused bytes.
                # 2 4-byte pointers in studiomdl to the material class, for
                #      server and client - shouldn't be in the file...
                # 40 bytes of unused space (for expansion...)
                cast('Tuple[int, int, int]', struct_read('iii 4x 8x 40x', f)),
            )
        for tex_ind, (offset, data) in enumerate(tex_temp):
            name_offset, flags, used = data
            textures[tex_ind] = (
                read_nullstr(f, offset + name_offset),
                flags,
                used,
            )

        # Now parse through the family table, to match skins to textures.
        f.seek(skinref_ind)
        ref_data = f.read(2 * skinref_count * skin_count)
        self.skins: List[List[str]] = []
        skin_group = Struct('<{}H'.format(skinref_count))
        offset = 0
        for ind in range(skin_count):
            self.skins.append([
                textures[i][0].replace('\\', '/').lstrip('/')
                for i in skin_group.unpack_from(ref_data, offset)
            ])
            offset += skin_group.size

        # If models have folders, add those folders onto cdmaterials.
        for tex, flags, used in textures:
            tex = tex.replace('\\', '/')
            if '/' in tex:
                folder = tex.rsplit('/', 1)[0]
                if folder not in self.cdmaterials:
                    self.cdmaterials.append(folder)

        # All models fallback to checking the texture at a root folder.
        if '' not in self.cdmaterials:
            self.cdmaterials.append('')

        f.seek(surfaceprop_index)
        self.surfaceprop = read_nullstr(f)

        if keyvalue_count:
            self.keyvalues = read_nullstr(f, keyvalue_index)
        else:
            self.keyvalues = ''

        f.seek(includemodel_index)
        self.included_models = []
        for i in range(includemodel_count):
            pos = f.tell()
            # This is two offsets from the start of the structures.
            lbl_pos, filename_pos = struct_read('II', f)
            self.included_models.append(IncludedMDL(
                read_nullstr(f, pos + lbl_pos) if lbl_pos else '',
                read_nullstr(f, pos + filename_pos) if filename_pos else '',
            ))
            # Then return to after that struct - 4 bytes * 2.
            f.seek(pos + 4 * 2)

        f.seek(sequence_off)
        self.sequences = self._read_sequences(f, sequence_count)

        f.seek(bodypart_offset)
        self._cull_skins_table(f, bodypart_count)

    @staticmethod
    def _read_sequences(f: IO[bytes], count: int) -> List[Sequence]:
        """Split this off to decrease stack in main parse method."""
        sequences: List[Sequence] = [cast(Sequence, None)] * count
        for i in range(count):
            start_pos = f.tell()
            (
                base_ptr,
                label_pos,
                act_name_pos,
                flags,
                _,  # Seems to be a pointer.
                act_weight,
                event_count,
                event_pos,
            ) = struct_read('8i', f)
            bbox_min = str_readvec(f)
            bbox_max = str_readvec(f)

            # Skip 20 ints, 9 floats to get to keyvalues = 29*4 bytes
            # Then 8 unused ints.
            (
                keyvalue_pos,
                keyvalue_size,
            ) = struct_read('116xii32x', f)
            end_pos = f.tell()

            f.seek(start_pos + event_pos)
            events: List[SeqEvent] = [cast(SeqEvent, None)] * event_count
            for j in range(event_count):
                event_start = f.tell()
                (
                    event_cycle,
                    event_index,
                    event_flags,
                    event_options,
                    event_nameloc,
                ) = struct_read('fii64si', f)
                event_end = f.tell()

                # There are two event systems.
                event_type: Union[AnimEvents, str]
                if event_flags == 1 << 10:
                    # New system, name in the file.
                    event_name = read_nullstr(f, event_start + event_nameloc)
                    if event_name.isdigit():
                        try:
                            event_type = ANIM_EVENT_BY_INDEX[int(event_name)]
                        except KeyError:
                            raise ValueError('Unknown event index!')
                    else:
                        try:
                            event_type = ANIM_EVENT_BY_NAME[event_name]
                        except KeyError:
                            # NPC-specific events, declared dynamically.
                            event_type = event_name
                else:
                    # Old system, index.
                    try:
                        event_type = ANIM_EVENT_BY_INDEX[event_index]
                    except KeyError:
                        # raise ValueError('Unknown event index!')
                        print('Unknown: ', event_index, event_options.rstrip(b'\0'))
                        continue

                f.seek(event_end)
                events[j] = SeqEvent(
                    type=event_type,
                    cycle=event_cycle,
                    options=event_options.rstrip(b'\0').decode('ascii')
                )

            if keyvalue_size:
                keyvalues = read_nullstr(f, start_pos + keyvalue_pos)
            else:
                keyvalues = ''

            sequences[i] = Sequence(
                label=read_nullstr(f, start_pos + label_pos),
                act_name=read_nullstr(f, start_pos + act_name_pos),
                flags=flags,
                act_weight=act_weight,
                events=events,
                bbox_min=bbox_min,
                bbox_max=bbox_max,
                keyvalues=keyvalues,
            )

            f.seek(end_pos)

        return sequences

    def _cull_skins_table(self, f: IO[bytes], body_count: int) -> None:
        """Fix the table of used skins to correspond to those actually used.

        StudioMDL is rather messy, and adds many extra columns that are not used
        on the actual model.
        We're following  mstudiobodyparts_t -> mstudiomodel_t -> mstudiomesh_t -> material.
        """
        used_inds = set()

        # Iterate through bodygroups.
        for body_ind in range(body_count):
            body_start = f.tell()
            (
                body_name_off,  # Offset to find the bodygroup name
                model_count,  # Number of models in this group
                base,  # Unknown
                model_off,
            ) = struct_read('iiii', f)
            body_end = f.tell()

            f.seek(body_start + model_off)
            for model_ind in range(model_count):
                model_start = f.tell()
                (
                    mdl_name,
                    mdl_type,
                    bound_radius,
                    mesh_count,
                    mesh_off,
                    num_verts,
                    vert_off,
                    tangent_off,
                    attach_count,
                    attach_ind,
                    eyeball_count,
                    eyeball_ind,
                    # Two void* pointers,
                    # 32 empty bytes
                ) = struct_read('64s i f 9i 8x 32x', f)
                model_end = f.tell()

                f.seek(model_start + mesh_off)
                for mesh_ind in range(mesh_count):
                    (
                        material,
                        mesh_model_ind,
                        mesh_vert_count,
                        mesh_vert_off,
                        mesh_flex_count,
                        mesh_flex_ind,
                        mesh_mat_type,
                        mesh_mat_param,
                        mesh_id,
                        mesh_cent_x,
                        mesh_cent_y,
                        mesh_cent_z,
                        # Void pointer
                        # Array of LOD vertex counts ints, 8 of them
                        # 8 unused int spaces.
                    ) = struct_read('9i 3f 4x 32x 32x', f)
                    used_inds.add(material)

                f.seek(model_end)
            f.seek(body_end)

        for skin_ind, tex in enumerate(self.skins):
            self.skins[skin_ind] = [tex[i] for i in used_inds]

    def _parse_phy(self, f: IO[bytes], filename: str) -> None:
        """Parse the physics data file, if present.
        """
        [
            size,
            header_id,
            solid_count,
            checksum,
        ] = ST_PHY_HEADER.unpack(f.read(ST_PHY_HEADER.size))
        f.read(size - ST_PHY_HEADER.size)  # If the header is larger ever.
        for solid in range(solid_count):
            [solid_size] = struct_read('i', f)
            f.read(solid_size)  # Skip the header.
        self.phys_keyvalues = Property.parse(
            read_nullstr(f),
            filename + ":keyvalues",
            allow_escapes=False,
            single_line=True,
        )

    def iter_textures(self, skins: Optional[Iterable[int]] = None) -> Iterator[str]:
        """Yield textures used by this model.

        Skins if given should be a set of skin indexes, which constrains the
        list. This looks up in the filesystem to determine which CDMaterials
        folder to use, if any.
        """

        if skins:
            paths = set()
            for ind in skins:
                try:
                    paths.update(self.skins[ind])
                except IndexError:
                    # Default to skin 0.
                    paths.update(self.skins[0])
        else:
            paths = {
                tex
                for texgroup in self.skins
                for tex in texgroup
            }

        for tex in paths:
            for folder in self.cdmaterials:
                full = str(PurePosixPath('materials', folder, tex).with_suffix('.vmt'))
                if full in self._sys:
                    yield full
                    break


# Parsing code.
ChunkTuple: TypeAlias = Tuple  # TODO: Typevar inference for this doesn't work in .register call
# This is either a block of data or a size, then returns the offset where it was added.
ChunkAdd: TypeAlias = Callable[[Union[bytes, int]], int]
# Functions to read from and write to the file.
ChunkRead: TypeAlias = Callable[[Model, IO[bytes], ChunkTuple], object]
ChunkWrite: TypeAlias = Callable[[Model, IO[bytes], DeferredWrites, ChunkAdd], ChunkTuple]


@attrs.define
class Chunk:
    """Represents part of the model."""
    format: Struct  # The part of the header this uses.
    read: ChunkRead
    write: Optional[ChunkWrite] = None

    @classmethod
    def register(cls, fmt: str) -> Callable[[ChunkRead], 'Chunk']:
        """Define a chunk. .writer must be called afterwards."""
        def deco(func: ChunkRead) -> Chunk:
            chunk = cls(Struct(fmt), func, None)
            _CHUNKS.append(chunk)
            return chunk
        return deco

    def writer(self, write: ChunkWrite) -> 'Chunk':
        """Define the writer."""
        if self.write is not None:
            raise ValueError("Can't define two writers.")
        self.write = write
        return self

_CHUNKS: List[Chunk] = []


@Chunk.register(f'3f 3f 3f 3f 3f 3f')
def _chunk_dimensions(mdl: Model, f: IO[bytes], data: Tuple[float, ...]) -> None:
    """Basic model dimensions."""
    mdl.eye_pos = Vec(data[0:3])
    mdl.illum_pos = Vec(data[3:6])
    mdl.hull_min = Vec(data[6:9])
    mdl.hull_max = Vec(data[9:12])
    mdl.view_min = Vec(data[12:15])
    mdl.view_max = Vec(data[15:18])
    assert len(data) == 18, data


@_chunk_dimensions.writer
def _chunk_dimensions_write(
    mdl: Model, f: IO[bytes],
    defer: DeferredWrites, add_chunk: ChunkAdd,
) -> Tuple[float, ...]:
    """Basic model dimensions."""
    return tuple(itertools.chain(
        mdl.eye_pos, mdl.illum_pos,
        mdl.hull_min, mdl.hull_max,
        mdl.view_min, mdl.view_max,
    ))


@Chunk.register('i')
def _chunk_flags(mdl: Model, f: IO[bytes], data: Tuple[int]) -> None:
    """Main model bitflags."""
    mdl.flags = Flags(*data)


@_chunk_flags.writer
def _chunk_flags_write(
    mdl: Model, f: IO[bytes],
    defer: DeferredWrites, malloc: ChunkAdd,
) -> Tuple[int]:
    """Main model bitflags."""
    return (mdl.flags.value, )


@Chunk.register('ii')
def _chunk_bones(mdl: Model, f: IO[bytes], header_data: Tuple[int, int]) -> None:
    """Bone definitions."""
    count, off = header_data
    mdl.bones_order.clear()
    mdl.bones.clear()
    for _ in range(count):
        f.seek(off)
        data = ST_BONE.unpack(f.read(ST_BONE.size))
        assert len(data) == 46, f'{len(data)} != 46'
        pose_to_bone, pose_to_bone_off = parse_3x4_matrix(data[24:36])

        bone = Bone(
            name=read_nullstr(f, off + data[0]),
            parent=data[1],
            controller_ind=data[2:8],
            pos=Vec(data[8:11]),
            quat=data[11:15],
            rotation=Angle(map(math.degrees, data[15:18])),
            pos_scale=Vec(data[18:21]),
            rot_scale=Vec(data[21:24]),
            pose_to_bone=pose_to_bone,
            pose_to_bone_off=pose_to_bone_off,
            q_alignment=data[36:40],
            flags=data[40],
            proc_type=data[41],
            proc_index=data[42],
            phys_bone=data[43],
            surfaceprop=read_nullstr(f, off + data[44]),
            contents=BSPContents(data[45]),
        )
        mdl.bones[bone.name] = bone
        mdl.bones_order.append(bone)
        off += ST_BONE.size
    for bone in mdl.bones_order:
        if bone.parent == -1:
            bone.parent = None
        else:
            bone.parent = mdl.bones_order[bone.parent]  # type: ignore


@_chunk_bones.writer
def _chunk_bones_write(
    mdl: Model, f: IO[bytes],
    defer: DeferredWrites, malloc: ChunkAdd,
) -> Tuple[int, int]:
    """Bone definitions."""
    base_offset = offset = malloc(ST_BONE.size * len(mdl.bones_order))
    bone_to_ind = {
        bone: ind
        for ind, bone in enumerate(mdl.bones_order)
    }
    for bone in mdl.bones_order:
        f.seek(offset)
        f.write(ST_BONE.pack(
            malloc(bone.name.encode('ascii')) - offset,
            bone_to_ind[bone.parent] if bone.parent is not None else -1,
            *bone.controller_ind,
            *bone.pos, *bone.quat,
            math.radians(bone.rotation.pitch),
            math.radians(bone.rotation.yaw),
            math.radians(bone.rotation.roll),
            *bone.pos_scale, *bone.rot_scale,
            *build_3x4_matrix(bone.pose_to_bone, bone.pose_to_bone_off),
            *bone.q_alignment,
            bone.flags,
            bone.proc_type,
            bone.proc_index,
            bone.phys_bone,
            malloc(bone.surfaceprop.encode('ascii')) - offset,
            bone.contents.value,
        ))
        offset += ST_BONE.size

    return len(mdl.bones_order), base_offset


@Chunk.register('ii')
def _chunk_bone_controllers(mdl: Model, f: IO[bytes], header_data: Tuple[int, int]) -> None:
    """Goldsource era control of bones via entity code."""
    count, off = header_data
    mdl.bone_controllers.clear()
    f.seek(off)
    for _ in range(count):
        (
            bone_ind,
            kind,
            start,
            end,
            rest,
            inputfield
        ) = ST_BONE_CONTROLLER.unpack(f.read(ST_BONE_CONTROLLER.size))
        mdl.bone_controllers.append(BoneController(
            mdl.bones_order[bone_ind],
            kind,
            start, end, rest,
            inputfield,
        ))


@_chunk_bone_controllers.writer
def _chunk_bone_controllers_write(
    mdl: Model, f: IO[bytes],
    defer: DeferredWrites, malloc: ChunkAdd,
) -> Tuple[int, int]:
    """Goldsource era control of bones via entity code."""
    offset = malloc(ST_BONE_CONTROLLER.size * len(mdl.bone_controllers))
    bone_to_ind = {
        bone: ind
        for ind, bone in enumerate(mdl.bones_order)
    }
    f.seek(offset)
    for controller in mdl.bone_controllers:
        f.write(ST_BONE_CONTROLLER.pack(
            bone_to_ind[controller.bone],
            controller.type,
            controller.start, controller.end,
            controller.rest,
            controller.inputfield,
        ))
    return len(mdl.bone_controllers), offset


@Chunk.register('ii')
def _chunk_hitbox_sets(mdl: Model, f: IO[bytes], header_data: Tuple[int, int]) -> None:
    """The hitboxes for a model."""
    set_count, set_off = header_data
    for _ in range(set_count):
        f.seek(set_off)
        (name_off, hbox_count, hbox_off) = ST_HITBOXSET.unpack(f.read(ST_HITBOXSET.size))
        hbset_name = read_nullstr(f, set_off + name_off)
        hb_set: List[Hitbox] = []
        mdl.hitboxes[hbset_name] = hb_set
        hbox_off += set_off
        for _ in range(hbox_count):
            f.seek(hbox_off)
            (
                bone_ind, group,
                min_x, min_y, min_z,
                max_x, max_y, max_z,
                name_off,
            ) = ST_HITBOX.unpack(f.read(ST_HITBOX.size))
            hb_set.append(Hitbox(
                mdl.bones_order[bone_ind],
                group,
                read_nullstr(f, hbox_off + name_off) if name_off != 0 else "",
                Vec(min_x, min_y, min_z),
                Vec(max_x, max_y, max_z),
            ))
            hbox_off += ST_HITBOX.size

        set_off += ST_HITBOXSET.size


@_chunk_hitbox_sets.writer
def _cunk_hitbox_sets_write(
    mdl: Model, f: IO[bytes],
    defer: DeferredWrites, malloc: ChunkAdd,
) -> Tuple[int, int]:
    """The hitboxes for a model."""
    hboxset_base = hboxset_off = malloc(ST_HITBOXSET.size * len(mdl.hitboxes))
    bone_to_ind = {
        bone: ind
        for ind, bone in enumerate(mdl.bones_order)
    }
    for hboxset_name, hboxes in mdl.hitboxes.items():
        f.seek(hboxset_off)
        hbox_off = malloc(ST_HITBOX.size * len(hboxes))
        f.write(ST_HITBOXSET.pack(
            malloc(hboxset_name.encode('ascii')) - hboxset_off,
            len(hboxes),
            hbox_off
        ))
        for hbox in hboxes:
            f.seek(hbox_off)
            f.write(ST_HITBOX.pack(
                bone_to_ind[hbox.bone],
                hbox.group,
                malloc(hbox.name.encode('ascii')) - hbox_off if hbox.name else 0,
                *hbox.min, *hbox.max,
            ))
            hbox_off += ST_HITBOX.size
        hboxset_off += ST_HITBOXSET.size
    return len(mdl.hitboxes), hboxset_base


@Chunk.register('ii')
def _chunk_animation(mdl: Model, f: IO[bytes], header_data: Tuple[int, int]) -> None:
    """Basic animations."""
    count, offset = header_data
    for _ in range(count):
        f.seek(offset)
        (
            name_ind,
            fps,
            flags,
            num_frames,
            movement_count,
            movement_off,
            ikrulezero_ind,
            anim_block, anim_index,
            ikrule_count, ikrule_off, ikrule_animblock_off,
            local_hierachy_count, local_hierachy_off,
            section_ind, section_frames,
            zeroframe_span, zeroframe_count, zeroframe_index,
            zeroframe_stalltime,
        ) = ST_ANIMATION.unpack(f.read(ST_ANIMATION.size))
        name = read_nullstr(f, offset + name_ind)
        mdl.animations[name] = Animation(
            name, fps, flags, num_frames,
            (movement_count, movement_off),
            ikrulezero_ind,
            anim_block, anim_index,
            ikrule_count, ikrule_off, ikrule_animblock_off,
            local_hierachy_count, local_hierachy_off,
            section_ind, section_frames,
            zeroframe_span, zeroframe_count, zeroframe_index,
            zeroframe_stalltime,
        )
        offset += ST_ANIMATION.size


@_chunk_animation.writer
def _chunk_animation_write(
    mdl: Model, f: IO[bytes],
    defer: DeferredWrites, malloc: ChunkAdd,
) -> Tuple[int, int]:
    """Basic animations."""
    anim_base = anim_off = malloc(ST_ANIMATION.size * len(mdl.animations))
    for anim in mdl.animations.values():
        f.seek(anim_off)
        f.write(ST_ANIMATION.pack(
            malloc(anim.name.encode('ascii')) - anim_off,
            anim.fps,
            anim.flags,
            anim.frame_count,
            *anim.movement,
            anim.ikrule_zero,
            anim.animblock, anim.animindex,
            anim.ikrule_count, anim.ikrule_off, anim.ikrule_animblock,
            anim.local_hierarchy_count, anim.local_hierarchy_off,
            anim.section_off, anim.section_frames,
            anim.zeroframe_span, anim.zeroframe_count, anim.zeroframe_ind,
            anim.zeroframe_stalltime,
        ))
        anim_off += ST_ANIMATION.size
    return len(mdl.animations), anim_base
